import pandas as pd
from langchain_core.tools import tool
from typing import Dict, Any
import os
import json
import traceback as tb
import textwrap

def retrieve_dataframe() -> pd.DataFrame:
    '''Load the dataset as a pandas DataFrame from uploads folder.'''
    df = pd.read_csv(os.path.join(os.getcwd(),"uploads\\uploaded_data.csv"))
    return df

@tool
def retrieve_dataframe_meta() -> dict:
    """
    Retrieves metadata information of the dataframe loaded from uploads folder.

    Returns:
        dict: Metadata including column names, data types and number of rows and columns,
    """
    df = retrieve_dataframe()

    meta = {
        "num_rows": df.shape[0],
        "num_columns": df.shape[1],
        "columns": list(df.columns),
        "dtypes": df.dtypes.apply(lambda dt: str(dt)).to_dict(),
    }

    return meta

@tool
def execute_on_dataframe(code: str) -> dict:
    """
    Executes a user-provided Python code snippet on a pre-loaded pandas DataFrame 
    and returns the output as a JSON-serializable dictionary.

    The DataFrame is loaded internally from a fixed CSV file path (uploads/uploaded_data.csv).
    The code is executed in a restricted local scope where 'df' refers to a copy of this DataFrame 
    and 'pd' (pandas) is available for use.

    Parameters:
        code (str): A string containing Python code that operates on the DataFrame 'df'.
                    The code must assign the final output to a variable named 'result'.
                    'result' should be JSON-serializable (e.g., dict, list, primitive types).

    Returns:
        dict: A dictionary with keys:
            - "success" (bool): Indicates if code execution was successful.
            - "result" (any, optional): The JSON-serializable output of the executed code,
              present only if "success" is True.
            - "error" (str, optional): Error message if execution failed.
            - "traceback" (str, optional): Full traceback string if execution failed.

    Notes:
        - The code execution environment is limited to prevent side effects.
        - Exceptions during code execution are caught and returned in the output.
        - This tool is designed to safely execute data analysis code generated by an LLM or user input.
    """
    df = retrieve_dataframe()
    local_scope = {
        "df": df.copy(),  
        "pd": pd
    }

    try:
        exec(code, {}, local_scope)
        result = local_scope.get("result", None)

        json_result = json.loads(json.dumps(result, default=str))
        return {"success": True, "result": json_result}

    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "traceback": tb.format_exc()
        }



if __name__ == "__main__":
    df = retrieve_dataframe("uploaded_data.csv")
    print(df)

    user_code = textwrap.dedent("""
        result = df.head()
    """)
    print(execute_on_dataframe.invoke({"code": user_code, "df": df}))